{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robots.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","map","robot","i","key","username","SearchBox","type","placeholder","onChange","this","searchChangeHandler","React","Component","Scroll","divStyle","overflow","border","height","style","children","App","ev","setState","searchField","target","value","toLowerCase","state","filteredRobots","filter","includes","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCJSC,EAZF,SAACC,GACZ,OACE,yBAAKC,UAAU,yCACb,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAAMI,MACvD,6BACE,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCYHC,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OACE,yBAAKP,UAAY,MACdO,EAAOC,KAAI,SAACC,EAAOC,GAEhB,OAAQ,kBAAC,EAAD,CACCC,IAAKD,EACLP,GAAIM,EAAMN,GACVC,KAAMK,EAAML,KACZC,MAAOI,EAAMJ,aCbnBE,EAAS,CACpB,CACEJ,GAAI,EACJC,KAAM,gBACNQ,SAAU,OACVP,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNQ,SAAU,YACVP,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,WACVP,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,WACVP,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNQ,SAAU,SACVP,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNQ,SAAU,mBACVP,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,eACVP,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNQ,SAAU,gBACVP,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNQ,SAAU,WACVP,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNQ,SAAU,iBACVP,MAAO,2B,mCCxCIQ,E,YAjBd,WAAYd,GAAQ,qEACbA,I,sEAIJ,OACE,yBAAKC,UAAU,MACb,2BACEA,UAAY,mCACZc,KAAK,SACLC,YAAY,gBACZC,SAAUC,KAAKlB,MAAMmB,2B,GAZPC,IAAMC,WCiBfC,E,2MAfbC,SAAW,CACTC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,S,wEAIR,OACE,yBAAKC,MAAST,KAAKK,UACfL,KAAKlB,MAAM4B,c,GAVAR,IAAMC,WCmDZQ,G,kBA7Cb,WAAY7B,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRmB,oBAAsB,SAACW,GACrB,EAAKC,SAAS,CAAEC,YAAaF,EAAGG,OAAOC,MAAMC,iBAhB7C,EAAKC,MAAQ,CACX5B,OAAQA,EACRwB,YAAa,IALE,E,sEAuBT,IAAD,EACsBd,KAAKkB,MAA5B5B,EADC,EACDA,OAAQwB,EADP,EACOA,YACVK,EAAiB7B,EAAO8B,QAAO,SAAC5B,GAElC,OADaA,EAAML,KAAK8B,cAAcI,SAASP,MAMjD,OAFAQ,QAAQC,IAAIJ,GAGV,6BACA,6CACA,kBAAC,EAAD,CAAWlB,oBAAqBD,KAAKC,sBACnC,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUX,OAAQ6B,U,GAtCVjB,IAAMC,YCCxBqB,IAASC,OAAO,kBAAC,EAAD,MACAC,SAASC,eAAe,SPwHlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.fbc2ccd0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"tc bg-light-gray dib br3 pa3 ma2 grow\">\r\n      <img alt='my photo' src={`https://robohash.org/${props.id}`} />\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <p>{props.email}</p>\r\n      </div>\r\n\t  </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  return (\r\n    <div className = 'tc'>\r\n      {robots.map((robot, i) => \r\n        {\r\n          return (<Card \r\n                   key={i}\r\n                   id={robot.id} \r\n                   name={robot.name} \r\n                   email={robot.email} />);\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\nclass SearchBox extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n  render() {\r\n    return (\r\n      <div className='tc'>\r\n        <input \r\n          className = 'pa3 ba b--green bg-lightest-blue'\r\n          type='search'\r\n          placeholder='search robots'\r\n          onChange={this.props.searchChangeHandler}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass Scroll extends React.Component {\r\n  divStyle = {\r\n    overflow: 'scroll',\r\n    border: '5px solid black',\r\n    height: '800px'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style = {this.divStyle}> \r\n        { this.props.children } \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from './CardList';\r\nimport { robots } from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      robots: robots,\r\n      searchField: ''\r\n    }\r\n\r\n  }\r\n\r\n  /*componenetDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users').then((response) => {\r\n      response.json();\r\n    }).then((users) => {\r\n      this.setState({ robots: users });\r\n    });\r\n  }\r\n*/\r\n  searchChangeHandler = (ev) => {\r\n    this.setState({ searchField: ev.target.value.toLowerCase() });\r\n\r\n  }\r\n\r\n  render() {\r\n  \tconst {robots, searchField} = this.state;\r\n    let filteredRobots = robots.filter((robot) => {\r\n      let result = robot.name.toLowerCase().includes(searchField);\r\n      return result;\r\n    });\r\n\r\n    console.log(filteredRobots);\r\n\r\n    return (\r\n      <div>\r\n      <h1>Robot Friends</h1>\r\n      <SearchBox searchChangeHandler={this.searchChangeHandler} />\r\n        <Scroll>\r\n          <CardList robots={filteredRobots}/>\r\n        </Scroll>\r\n      \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport CardList from './CardList';\nimport {robots} from './robots';\nimport App from './App';\n\nReactDOM.render(<App />, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}